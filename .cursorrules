# InvestFellow Browser Extension - AI Development Guidelines

## PROJECT OVERVIEW

**InvestFellow** is a Chrome/browser extension that displays real-time stock and crypto prices in a customizable toolbar that appears on websites. It includes both content scripts (injected into web pages) and popup interfaces for user configuration.

### Core Architecture

- **Frontend**: React 18 + TypeScript + Styled Components
- **Build Tool**: Vite 4.5.2 (specifically downgraded for @crxjs compatibility)
- **Extension Framework**: Chrome Extension Manifest V3 with @crxjs/vite-plugin
- **Styling**: Styled Components + Custom Theme System
- **State Management**: React hooks + Chrome storage APIs
- **Package Manager**: Yarn

### Key Features

- Real-time stock/crypto price toolbar overlay on websites
- Customizable positioning (top/bottom, scrolling/static)
- AI-powered stock analysis tooltips with carousel insights
- Popup configuration interface
- Custom component library (replacing antd dependencies)
- Premium subscription system integration

## FILE STRUCTURE & ORGANIZATION

```
src/
├── components/           # Reusable UI components (replacing antd)
│   ├── Box/             # Flexible container component
│   ├── Radio/           # Custom radio buttons + RadioGroup
│   ├── Tooltip/         # Custom tooltip component
│   ├── Tag/             # Custom tag component
│   ├── Switch/          # Toggle switches
│   └── [Component]/
│       ├── index.tsx    # Main component export
│       ├── style.ts     # Styled components (when complex)
│       └── [Subcomponent].tsx  # Additional files if needed
├── content/             # Content script (injected into web pages)
│   ├── components/      # Content-specific components
│   │   ├── AITooltip/   # AI analysis carousel tooltip
│   │   ├── Ticker/      # Individual stock ticker display
│   │   └── BarInfo/     # Toolbar container
│   ├── App.tsx          # Content script root component
│   └── main.tsx         # Content script entry point
├── Popup/               # Extension popup interface
├── data/
│   ├── constants/       # Enums, storage keys, default values
│   └── static/          # Static data files
├── style/
│   └── theme.ts         # Centralized theme colors
├── types/               # TypeScript type definitions
└── utils/               # Utility functions
```

## CODING STANDARDS & PATTERNS

### Component Structure

1. **Directory per component** with `index.tsx` as main export
2. **Styled components** in same file or separate `style.ts` for complex styling
3. **TypeScript interfaces** defined at component level
4. **Generic components** when needed (e.g., `Radio<T>`, `RadioGroup<T>`)

### Styled Components Patterns

```typescript
// Use CSS variables in styled components for themes
const Component = styled.div`
  --primary-color: #8a2be2;
  --shadow: 0 5px 15px 0 #00000026;
  background: var(--primary-color);
`;

// Conditional styling with $ prefix for transient props
const Button = styled.button<{ $isActive: boolean }>`
  opacity: ${({ $isActive }) => $isActive ? 1 : 0.6};
`;

// Use css helper for conditional animations
import { css, keyframes } from 'styled-components';
const slideAnimation = keyframes`...`;
${({ $isAnimating }) => $isAnimating && css`
  animation: ${slideAnimation} 0.3s ease-in-out;
`}
```

### State Management

- **Local state**: useState for component-specific state
- **Chrome storage**: For persistent extension settings
- **Custom hooks**: For complex state logic and storage interactions

### Import Organization

```typescript
// External libraries first
import React, { useState, useEffect } from "react";
import styled, { keyframes, css } from "styled-components";

// Internal components
import Box from "../../../components/Box";
import theme from "../../../style/theme";

// Types and constants
import { ToolbarPositionOptions } from "../../../data/constants/storageKeys";
```

## USER PREFERENCES & REQUIREMENTS

### Design Philosophy

- **Clean, modern UI** with subtle AI-themed effects
- **Smooth animations** (300ms standard for transitions)
- **Responsive design** that works across different websites
- **Non-intrusive** overlays that don't break website functionality

### AI Features Implementation

- **Purple AI theme**: Primary `#8a2be2`, secondary `#4b0082`
- **Subtle animations**: Glow effects, shimmer, smooth transitions
- **Loading states**: Show meaningful loading messages (2.5s initial load)
- **Carousel interactions**: Fixed UI with sliding content only
- **Tooltip positioning**: Proper z-index and responsive positioning

### Component Replacement Strategy

- **Replace antd components** with custom styled-components
- **Maintain exact functionality** but with custom styling
- **Use react-hot-toast** instead of antd notifications
- **Custom radio, tooltips, tags** to match design system

### Animation Guidelines

- **Smooth sliding**: Use CSS keyframes with ease-in-out timing
- **Loading spinners**: Branded colors matching AI theme
- **Hover effects**: Subtle scale transforms (1.1x max)
- **No jarring movements**: Fixed containers with content sliding inside

## TECHNICAL CONSTRAINTS

### Vite Configuration

- **MUST use Vite 4.5.2** (newer versions break @crxjs/vite-plugin)
- **@crxjs/vite-plugin version compatibility** is critical
- **SVG imports** require proper type declarations in `src/types/assets.d.ts`

### Chrome Extension Limitations

- **Content Security Policy** restrictions
- **Manifest V3** requirements
- **Cross-origin** limitations for API calls
- **Storage quotas** for chrome.storage APIs

### Browser Compatibility

- **Modern browsers** focus (Chrome, Edge, Firefox)
- **CSS Grid and Flexbox** for layouts
- **ES6+ features** with TypeScript compilation

## DEVELOPMENT WORKFLOW

### Making Changes

1. **Run in development**: `yarn dev`
2. **Build for production**: `yarn build`
3. **Type checking**: Automatic with TypeScript
4. **Testing**: Manual testing in browser extension environment

### Adding New Components

1. Create directory in `src/components/[ComponentName]/`
2. Add `index.tsx` with main component
3. Use styled-components for styling
4. Export as default from index.tsx
5. Add TypeScript interfaces as needed

### Styling Guidelines

- **Use theme colors** from `src/style/theme.ts`
- **Consistent spacing** (8px, 12px, 16px multiples)
- **Standard shadows**: `0 5px 15px 0 #00000026`
- **Border radius**: 8px for cards, 4px for inputs, 50% for circles

## AI TOOLTIP SPECIFIC PATTERNS

### Carousel Structure

```typescript
// Fixed container with sliding content inside
<StaticCard>
  <ContentSlider>
    <SlidingContent>
      {" "}
      {/* Only this slides */}
      <Content />
    </SlidingContent>
  </ContentSlider>
  <FixedButtons /> {/* These never move */}
  <FixedArrows /> {/* These never move */}
</StaticCard>
```

### Insight Types & Emojis

1. **⚡ Momentum Insight** - Market sentiment and trading patterns
2. **💧 Liquidity Insight** - Technical indicators and breakouts
3. **🎯 Technical Timing Insight** - Analyst consensus
4. **🌍 Market Context Insight** - Options flow and institutional activity

### Loading States

- **Initial load only**: 2.5 seconds with branded spinner
- **No loading between slides**: Instant navigation with smooth animations
- **Meaningful messages**: "Initializing AI models...", "Analyzing across multiple dimensions"

## COMMON PITFALLS TO AVOID

1. **Don't upgrade Vite** beyond 4.5.2 (breaks extension build)
2. **Don't use antd components** (being replaced with custom components)
3. **Don't animate entire cards** (only slide content inside fixed containers)
4. **Don't forget $ prefix** for transient styled-component props
5. **Don't use inline styles** when styled-components are appropriate
6. **Don't break existing storage APIs** when adding new features
7. **Don't add loading states** to arrow navigation (should be instant)

## TESTING CONSIDERATIONS

- **Test in multiple browsers** (Chrome primary target)
- **Test on different websites** for content script compatibility
- **Test extension popup** functionality
- **Verify chrome.storage** persistence
- **Check responsive behavior** on different screen sizes
- **Validate AI tooltip positioning** on various website layouts

## FUTURE DEVELOPMENT NOTES

- **Component library completion**: Continue replacing remaining antd components
- **Performance optimization**: Monitor bundle size and load times
- **Accessibility improvements**: Add proper ARIA labels and keyboard navigation
- **Mobile responsive**: Consider mobile browser extension support
- **API integration**: Real-time stock data and AI analysis endpoints
